const express = require('express');
const fs = require('fs').promises;
const path = require('path');
const fetch = require('node-fetch');

const app = express();
const PORT = process.env.PORT || 3000;

const LOG_FILE_DIR = process.env.LOG_FILE_DIR || '/shared-logs';
const LOG_FILE_PATH = path.join(LOG_FILE_DIR, 'log.txt');

const PING_PONG_SERVICE_URL = 'http://ping-pong-service:80/pong-count';


app.get('/status', async (req, res) => {
  let logFileContent = "Log file content not available.";
  let pingPongCounter = "N/A";

  try {
    logFileContent = await fs.readFile(LOG_FILE_PATH, 'utf8');
  } catch (error) {
    if (error.code === 'ENOENT') {
      console.warn(`[READER] Log file not found: ${LOG_FILE_PATH}`);
      logFileContent = "UUID log not yet generated by logger container.";
    } else {
      console.error(`[READER] Error reading log file: ${error.message}`);
      logFileContent = `Error reading UUID log: ${error.message}`;
    }
  }

  try {
    const response = await fetch(PING_PONG_SERVICE_URL, { timeout: 5000 });
    if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
    }
    const data = await response.json();
    pingPongCounter = data.pongCount;
    console.log(`[READER] Fetched pong count from ping-pong app: ${pingPongCounter}`);
  } catch (error) {
    console.error(`[READER] Error fetching ping-pong counter from ${PING_PONG_SERVICE_URL}: ${error.message}`);
    pingPongCounter = `Error (${error.message})`;
  }

  const formattedLogLine = logFileContent.trim().split('\n').filter(line => line.length > 0).pop();

  const finalOutput = `${formattedLogLine}.Ping / Pongs: ${pingPongCounter}`;

  res.type('text/plain').send(finalOutput);
});

app.get('/', (req, res) => {
    res.send('Log-output Reader application is running. Try /status for combined info.');
});

app.listen(PORT, () => {
  console.log(`[READER] Server started in port ${PORT}`);
  console.log(`[READER] Reading log-output logs from: ${LOG_FILE_PATH}`);
  console.log(`[READER] Will fetch ping-pong counter from: ${PING_PONG_SERVICE_URL}`);
});
